name: Production Deployment Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  test-services:
    name: Test Microservices
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          'authorization-service',
          'api-gateway-service',
          'user-management-service',
          'model-management-service',
          'model-training-service'
        ]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      if: contains(matrix.service, 'authorization') || contains(matrix.service, 'api-gateway') || contains(matrix.service, 'user-management')
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Set up Python
      if: contains(matrix.service, 'model')
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      if: contains(matrix.service, 'health-check')
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Run Go tests
      if: contains(matrix.service, 'authorization') || contains(matrix.service, 'api-gateway') || contains(matrix.service, 'user-management')
      run: |
        cd apps/backend-services/${{ matrix.service }}
        go mod tidy
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Run Python tests
      if: contains(matrix.service, 'model')
      run: |
        cd apps/backend-services/${{ matrix.service }}
        pip install -r requirements.txt
        pip install pytest pytest-cov
        pytest --cov=. --cov-report=html --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test-services]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [
          'authorization-service',
          'api-gateway-service',
          'user-management-service',
          'configuration-service',
          'discovery-service',
          'health-check-service',
          'model-management-service',
          'model-training-service',
          'model-deployment-service',
          'data-integration-service',
          'analytics-service'
        ]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/backend-services/${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Sign container image
      run: |
        cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}@${{ steps.build.outputs.digest }}
      env:
        COSIGN_EXPERIMENTAL: 1

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-and-push]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Kubernetes cluster
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: nexus-test
        config: test/kind-config.yaml

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Deploy to test cluster
      run: |
        helm upgrade --install nexus-test ./infra/helm/nexus-platform \
          --namespace nexus-test --create-namespace \
          --set environment=test \
          --set image.tag=${{ github.sha }} \
          --wait --timeout=10m

    - name: Run integration tests
      run: |
        kubectl wait --for=condition=ready pod -l app=authorization-service -n nexus-test --timeout=300s
        kubectl wait --for=condition=ready pod -l app=model-management-service -n nexus-test --timeout=300s
        
        # Port forward for testing
        kubectl port-forward svc/kong-proxy 8000:80 -n nexus-test &
        sleep 10
        
        # Run API tests
        ./scripts/test-ai-platform.sh

    - name: Collect logs on failure
      if: failure()
      run: |
        kubectl logs -l app=authorization-service -n nexus-test --tail=100
        kubectl logs -l app=model-management-service -n nexus-test --tail=100
        kubectl describe pods -n nexus-test

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-west-2 --name nexus-staging-cluster

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Deploy to staging
      run: |
        helm upgrade --install nexus-staging ./infra/helm/nexus-platform \
          --namespace nexus-staging --create-namespace \
          --set environment=staging \
          --set image.tag=${{ github.sha }} \
          --set ingress.hosts[0].host=staging-api.nexus.ai \
          --wait --timeout=15m

    - name: Run staging smoke tests
      run: |
        # Wait for deployment
        kubectl rollout status deployment/authorization-service -n nexus-staging
        kubectl rollout status deployment/model-management-service -n nexus-staging
        
        # Run smoke tests
        curl -f https://staging-api.nexus.ai/health
        curl -f https://staging-api.nexus.ai/models/health

    - name: Notify Slack on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ Nexus Platform successfully deployed to staging"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-west-2 --name nexus-production-cluster

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Create production backup
      run: |
        # Backup current production state
        kubectl create backup nexus-prod-backup-$(date +%Y%m%d-%H%M%S) \
          --include-namespaces nexus-platform,nexus-ai

    - name: Deploy to production with blue-green strategy
      run: |
        # Deploy to green environment
        helm upgrade --install nexus-green ./infra/helm/nexus-platform \
          --namespace nexus-green --create-namespace \
          --set environment=production \
          --set image.tag=${{ github.ref_name }} \
          --set ingress.hosts[0].host=green-api.nexus.ai \
          --wait --timeout=20m

    - name: Run production validation tests
      run: |
        # Comprehensive production tests
        kubectl rollout status deployment/authorization-service -n nexus-green
        kubectl rollout status deployment/model-management-service -n nexus-green
        
        # Health checks
        curl -f https://green-api.nexus.ai/health
        curl -f https://green-api.nexus.ai/models/health
        
        # Load test
        ./scripts/load-test-production.sh https://green-api.nexus.ai

    - name: Switch traffic to green (Blue-Green deployment)
      run: |
        # Update ingress to point to green environment
        kubectl patch ingress nexus-ingress -n nexus-platform \
          -p '{"spec":{"rules":[{"host":"api.nexus.ai","http":{"paths":[{"path":"/","pathType":"Prefix","backend":{"service":{"name":"nexus-green-kong-proxy","port":{"number":80}}}}]}}]}}'
        
        # Wait for traffic switch
        sleep 30
        
        # Verify production traffic
        curl -f https://api.nexus.ai/health

    - name: Clean up blue environment
      run: |
        # Remove old blue environment after successful deployment
        helm uninstall nexus-blue -n nexus-blue || true
        kubectl delete namespace nexus-blue || true

    - name: Notify teams on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "🚀 Nexus Platform v${{ github.ref_name }} successfully deployed to production!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Create GitHub release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Nexus Platform ${{ github.ref_name }}
        body: |
          ## Nexus Platform Release ${{ github.ref_name }}
          
          ### 🚀 New Features
          - AI-native platform capabilities
          - Production-ready microservices
          - Enterprise security and monitoring
          
          ### 🔧 Improvements
          - Enhanced performance and reliability
          - Better observability and monitoring
          - Improved developer experience
          
          ### 📊 Deployment Information
          - **Environment**: Production
          - **Deployment Strategy**: Blue-Green
          - **Image Tag**: ${{ github.ref_name }}
          - **Deployed At**: ${{ github.event.head_commit.timestamp }}
        draft: false
        prerelease: false

  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-west-2 --name nexus-production-cluster

    - name: Rollback to previous version
      run: |
        helm rollback nexus-production -n nexus-platform
        kubectl rollout status deployment/authorization-service -n nexus-platform
        kubectl rollout status deployment/model-management-service -n nexus-platform

    - name: Notify teams of rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "⚠️ Nexus Platform production deployment failed and was rolled back"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
