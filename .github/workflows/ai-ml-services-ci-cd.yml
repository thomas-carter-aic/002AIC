name: AI/ML Services CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/backend-services/agent-orchestration-service/**'
      - 'apps/backend-services/model-training-service/**'
      - 'apps/backend-services/model-tuning-service/**'
      - 'apps/backend-services/model-deployment-service/**'
      - 'apps/backend-services/data-integration-service/**'
      - 'apps/backend-services/pipeline-execution-service/**'
      - 'infra/k8s/ai-ml-services/**'
  pull_request:
    branches: [main]
    paths:
      - 'apps/backend-services/agent-orchestration-service/**'
      - 'apps/backend-services/model-training-service/**'
      - 'apps/backend-services/model-tuning-service/**'
      - 'apps/backend-services/model-deployment-service/**'
      - 'apps/backend-services/data-integration-service/**'
      - 'apps/backend-services/pipeline-execution-service/**'
      - 'infra/k8s/ai-ml-services/**'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: 002aic

jobs:
  # Detect which AI/ML services changed
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      agent-orchestration-service: ${{ steps.changes.outputs.agent-orchestration-service }}
      model-training-service: ${{ steps.changes.outputs.model-training-service }}
      model-tuning-service: ${{ steps.changes.outputs.model-tuning-service }}
      model-deployment-service: ${{ steps.changes.outputs.model-deployment-service }}
      data-integration-service: ${{ steps.changes.outputs.data-integration-service }}
      pipeline-execution-service: ${{ steps.changes.outputs.pipeline-execution-service }}
      k8s-manifests: ${{ steps.changes.outputs.k8s-manifests }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          agent-orchestration-service:
            - 'apps/backend-services/agent-orchestration-service/**'
          model-training-service:
            - 'apps/backend-services/model-training-service/**'
          model-tuning-service:
            - 'apps/backend-services/model-tuning-service/**'
          model-deployment-service:
            - 'apps/backend-services/model-deployment-service/**'
          data-integration-service:
            - 'apps/backend-services/data-integration-service/**'
          pipeline-execution-service:
            - 'apps/backend-services/pipeline-execution-service/**'
          k8s-manifests:
            - 'infra/k8s/ai-ml-services/**'

  # Security and vulnerability scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.agent-orchestration-service == 'true' ||
      needs.detect-changes.outputs.model-training-service == 'true' ||
      needs.detect-changes.outputs.model-tuning-service == 'true' ||
      needs.detect-changes.outputs.model-deployment-service == 'true' ||
      needs.detect-changes.outputs.data-integration-service == 'true' ||
      needs.detect-changes.outputs.pipeline-execution-service == 'true'
    steps:
    - uses: actions/checkout@v4
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and test Python AI/ML services
  build-python-services:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.agent-orchestration-service == 'true' ||
      needs.detect-changes.outputs.model-training-service == 'true' ||
      needs.detect-changes.outputs.model-tuning-service == 'true' ||
      needs.detect-changes.outputs.data-integration-service == 'true' ||
      needs.detect-changes.outputs.pipeline-execution-service == 'true'
    strategy:
      matrix:
        service: [agent-orchestration-service, model-training-service, model-tuning-service, data-integration-service, pipeline-execution-service]
    steps:
    - uses: actions/checkout@v4
    
    - name: Check if service changed
      id: check-service
      run: |
        if [ "${{ needs.detect-changes.outputs[matrix.service] }}" == "true" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Set up Python
      if: steps.check-service.outputs.changed == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache Python dependencies
      if: steps.check-service.outputs.changed == 'true'
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      if: steps.check-service.outputs.changed == 'true'
      working-directory: ./apps/backend-services/${{ matrix.service }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 mypy
    
    - name: Run linting
      if: steps.check-service.outputs.changed == 'true'
      working-directory: ./apps/backend-services/${{ matrix.service }}
      run: |
        black --check .
        flake8 .
        mypy .
    
    - name: Run tests
      if: steps.check-service.outputs.changed == 'true'
      working-directory: ./apps/backend-services/${{ matrix.service }}
      run: |
        pytest --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage reports
      if: steps.check-service.outputs.changed == 'true'
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/backend-services/${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}
    
    - name: Build Docker image
      if: steps.check-service.outputs.changed == 'true'
      working-directory: ./apps/backend-services/${{ matrix.service }}
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ github.sha }} .
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:latest .
    
    - name: Log in to Container Registry
      if: steps.check-service.outputs.changed == 'true' && github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Push Docker image
      if: steps.check-service.outputs.changed == 'true' && github.event_name != 'pull_request'
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:latest

  # Build and test Go AI/ML services
  build-go-services:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.model-deployment-service == 'true'
    strategy:
      matrix:
        service: [model-deployment-service]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      working-directory: ./apps/backend-services/${{ matrix.service }}
      run: go mod download
    
    - name: Run tests
      working-directory: ./apps/backend-services/${{ matrix.service }}
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/backend-services/${{ matrix.service }}/coverage.out
        flags: ${{ matrix.service }}
    
    - name: Build binary
      working-directory: ./apps/backend-services/${{ matrix.service }}
      run: |
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .
    
    - name: Build Docker image
      working-directory: ./apps/backend-services/${{ matrix.service }}
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ github.sha }} .
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:latest .
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Push Docker image
      if: github.event_name != 'pull_request'
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:latest

  # AI/ML specific integration tests
  ai-ml-integration-tests:
    runs-on: ubuntu-latest
    needs: [build-python-services, build-go-services]
    if: always() && (needs.build-python-services.result == 'success' || needs.build-go-services.result == 'success')
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install test dependencies
      run: |
        pip install pytest requests mlflow scikit-learn numpy pandas
    
    - name: Run AI/ML integration tests
      working-directory: ./test/integration
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db?sslmode=disable
        REDIS_URL: redis://localhost:6379
        MLFLOW_TRACKING_URI: http://localhost:5000
      run: |
        python -m pytest ai-ml-services/ -v --tb=short

  # Model validation and testing
  model-validation:
    runs-on: ubuntu-latest
    needs: [build-python-services]
    if: |
      needs.build-python-services.result == 'success' &&
      (needs.detect-changes.outputs.model-training-service == 'true' ||
       needs.detect-changes.outputs.model-tuning-service == 'true')
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install ML dependencies
      run: |
        pip install scikit-learn tensorflow torch mlflow great-expectations
    
    - name: Run model validation tests
      run: |
        python test/model-validation/validate_models.py
    
    - name: Generate model report
      run: |
        python test/model-validation/generate_report.py
    
    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: model-validation-report
        path: test/model-validation/reports/

  # Deploy to staging
  deploy-ai-ml-staging:
    runs-on: ubuntu-latest
    needs: [security-scan, build-python-services, build-go-services, ai-ml-integration-tests, model-validation]
    if: |
      always() && 
      github.ref == 'refs/heads/develop' &&
      (needs.build-python-services.result == 'success' || needs.build-go-services.result == 'success') &&
      needs.ai-ml-integration-tests.result == 'success'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Update image tags in manifests
      run: |
        sed -i "s|002aic/agent-orchestration-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/agent-orchestration-service:${{ github.sha }}|g" infra/k8s/ai-ml-services/agent-orchestration-service.yaml
        sed -i "s|002aic/model-training-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/model-training-service:${{ github.sha }}|g" infra/k8s/ai-ml-services/model-training-service.yaml
        sed -i "s|002aic/model-tuning-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/model-tuning-service:${{ github.sha }}|g" infra/k8s/ai-ml-services/model-tuning-service.yaml
        sed -i "s|002aic/model-deployment-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/model-deployment-service:${{ github.sha }}|g" infra/k8s/ai-ml-services/model-deployment-service.yaml
        sed -i "s|002aic/data-integration-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/data-integration-service:${{ github.sha }}|g" infra/k8s/ai-ml-services/data-integration-service.yaml
        sed -i "s|002aic/pipeline-execution-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/pipeline-execution-service:${{ github.sha }}|g" infra/k8s/ai-ml-services/pipeline-execution-service.yaml
    
    - name: Deploy AI/ML services to staging
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f infra/k8s/ai-ml-services/ -n aic-ai-ml-staging
        kubectl rollout status deployment --all -n aic-ai-ml-staging --timeout=600s

  # Deploy to production
  deploy-ai-ml-production:
    runs-on: ubuntu-latest
    needs: [security-scan, build-python-services, build-go-services, ai-ml-integration-tests, model-validation]
    if: |
      always() && 
      github.ref == 'refs/heads/main' &&
      (needs.build-python-services.result == 'success' || needs.build-go-services.result == 'success') &&
      needs.ai-ml-integration-tests.result == 'success' &&
      needs.model-validation.result == 'success'
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Update image tags in manifests
      run: |
        sed -i "s|002aic/agent-orchestration-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/agent-orchestration-service:${{ github.sha }}|g" infra/k8s/ai-ml-services/agent-orchestration-service.yaml
        sed -i "s|002aic/model-training-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/model-training-service:${{ github.sha }}|g" infra/k8s/ai-ml-services/model-training-service.yaml
        sed -i "s|002aic/model-tuning-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/model-tuning-service:${{ github.sha }}|g" infra/k8s/ai-ml-services/model-tuning-service.yaml
        sed -i "s|002aic/model-deployment-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/model-deployment-service:${{ github.sha }}|g" infra/k8s/ai-ml-services/model-deployment-service.yaml
        sed -i "s|002aic/data-integration-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/data-integration-service:${{ github.sha }}|g" infra/k8s/ai-ml-services/data-integration-service.yaml
        sed -i "s|002aic/pipeline-execution-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/pipeline-execution-service:${{ github.sha }}|g" infra/k8s/ai-ml-services/pipeline-execution-service.yaml
    
    - name: Deploy AI/ML services to production
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f infra/k8s/ai-ml-services/ -n aic-ai-ml
        kubectl rollout status deployment --all -n aic-ai-ml --timeout=600s
    
    - name: Run AI/ML smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        # Wait for services to be ready
        sleep 60
        
        # Test AI/ML services through API Gateway
        GATEWAY_IP=$(kubectl get service api-gateway-service -n aic-platform -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Run basic health checks for AI/ML services
        curl -f http://$GATEWAY_IP/v1/ai/agent-orchestration/health || exit 1
        curl -f http://$GATEWAY_IP/v1/ai/model-training/health || exit 1
        curl -f http://$GATEWAY_IP/v1/ai/model-deployment/health || exit 1
        curl -f http://$GATEWAY_IP/v1/ai/data-integration/health || exit 1
        curl -f http://$GATEWAY_IP/v1/ai/pipeline-execution/health || exit 1

  # Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-ai-ml-staging, deploy-ai-ml-production]
    if: always()
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#ai-ml-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
