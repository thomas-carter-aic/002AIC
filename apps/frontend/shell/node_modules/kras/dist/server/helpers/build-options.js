import { basename } from 'path';
function getFile(fileInfo) {
    const fileName = fileInfo.path;
    return {
        id: Buffer.from(fileName).toString('base64'),
        name: fileName,
        basename: basename(fileName),
        active: fileInfo.active,
        error: fileInfo.error,
    };
}
function getEntry(fileInfos, desc) {
    const fileName = fileInfos[0].path;
    return {
        id: Buffer.from(fileName).toString('base64'),
        name: fileName,
        basename: basename(fileName),
        entries: fileInfos.map((entry, i) => ({
            active: entry.active,
            error: entry.error,
            description: desc(entry, fileName, i),
        })),
    };
}
export function editDirectoryOption(directories) {
    return {
        description: `Select the directories to inspect for matching files.`,
        title: 'Source Directories',
        type: 'directory',
        value: directories,
    };
}
export function editFileOption(files) {
    return {
        description: `Toggle or modify the found files without using an external text editor.`,
        title: 'Found Files',
        type: 'file',
        value: files.map((fileInfo) => getFile(fileInfo)),
    };
}
export function editEntryOption(files, desc) {
    return {
        description: `Modify the found files without using an external text editor or toggle their entries.`,
        title: 'Found Files & Entries',
        type: 'entry',
        value: files.map((subfiles) => getEntry(subfiles, desc)),
    };
}
