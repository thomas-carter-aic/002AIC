function setIfUndefined(obj, key, value) {
    if (obj[key] === undefined) {
        obj[key] = value;
    }
    return obj;
}
function set(obj, key, value) {
    obj[key] = value;
    return obj;
}
function buildResponse(state) {
    const status = {
        code: state.statusCode || 200,
        text: state.statusText || '',
    };
    const url = state.url || '';
    const content = state.content || '';
    const redirectUrl = state.redirectUrl;
    const headers = state.headers || {};
    const injector = state.injector || {};
    setIfUndefined(headers, 'content-type', 'text/html');
    setIfUndefined(injector, 'name', '(none)');
    return {
        status,
        url,
        content,
        redirectUrl,
        headers,
        injector,
    };
}
export function fromNode(ans, body, injector) {
    return buildResponse({
        statusCode: ans.statusCode,
        statusText: ans.statusMessage,
        url: ans.url || ans.request.href,
        headers: ans.headers,
        content: body,
        injector,
    });
}
export function fromHar(url, response, injector) {
    const encoding = response.content.encoding || 'utf8';
    const mimeType = response.content.mimeType;
    const text = response.content.text || '';
    const headers = response.headers.reduce((h, c) => set(h, c.name, c.value), {});
    setIfUndefined(headers, 'content-type', mimeType);
    return buildResponse({
        statusCode: response.status,
        statusText: response.statusText,
        url,
        redirectUrl: response.redirectURL,
        headers,
        content: Buffer.from(text, encoding),
        injector,
    });
}
export function fromJson(url, statusCode, statusText, headers, content, injector) {
    return buildResponse({
        statusCode,
        statusText,
        url,
        headers,
        content,
        injector,
    });
}
export function fromMissing(url) {
    const headers = {
        ['content-type']: 'text/plain',
    };
    return buildResponse({
        url,
        statusCode: 500,
        statusText: 'Error',
        headers,
        content: 'Entry not found.',
    });
}
