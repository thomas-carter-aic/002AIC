function tryRead(fn) {
    try {
        return fn();
    }
    catch (e) {
        return undefined;
    }
}
function transformInjector(injector) {
    return tryRead(() => ({
        name: injector.name,
        active: injector.active,
        options: {
            ...injector.getOptions(),
        },
    }));
}
export function readInjectorsSettings(server) {
    return (req, res) => {
        const injectors = server.injectors.map(transformInjector).filter((injector) => injector !== undefined);
        res.json({ injectors });
    };
}
export function readInjectorSettings(server) {
    return (req, res) => {
        const name = req.params.name;
        const injector = server.injectors.filter((m) => m.name === name).map(transformInjector)[0];
        if (injector) {
            res.json(injector);
        }
        else {
            res.sendStatus(404);
        }
    };
}
export function saveInjectorSettings(server) {
    return (req, res) => {
        const name = req.params.name;
        const options = JSON.parse(req.body || '{}');
        const injector = server.injectors.filter((m) => m.name === name)[0];
        if (injector) {
            injector.setOptions(options);
            res.sendStatus(200);
        }
        else {
            res.sendStatus(404);
        }
    };
}
