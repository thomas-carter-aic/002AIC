import { spawn } from 'child_process';
import { version } from '../info';
const started = new Date();
function start() {
    const [prog, ...args] = process.argv;
    const cwd = process.cwd();
    spawn(prog, args, {
        cwd,
        detached: true,
        stdio: 'inherit',
    }).unref();
}
function stop() {
    process.exit();
}
function restart() {
    process.on('exit', start);
    stop();
}
export function configOf(server, config) {
    return (_, res) => {
        res.json({
            directory: config.directory,
            sources: config.sources,
            map: config.map,
            name: config.name,
            version,
            started: started.toString(),
            mode: 'running',
        });
    };
}
export function updateClient(server, config) {
    return (req, res) => {
        const options = JSON.parse(req.body || '{}');
        switch (options.mode) {
            case 'restart':
                setTimeout(restart, 1000);
                break;
            case 'stop':
                setTimeout(stop, 1000);
                break;
            default:
                break;
        }
        res.sendStatus(200);
    };
}
