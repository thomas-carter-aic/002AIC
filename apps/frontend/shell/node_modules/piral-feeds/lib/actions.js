import { withKey, withoutKey } from 'piral-core';
export function createFeed(ctx, id) {
    ctx.dispatch((state) => ({
        ...state,
        feeds: withKey(state.feeds, id, {
            data: undefined,
            error: undefined,
            loaded: false,
            loading: false,
        }),
    }));
}
export function destroyFeed(ctx, id) {
    ctx.dispatch((state) => ({
        ...state,
        feeds: withoutKey(state.feeds, id),
    }));
}
export function loadFeed(ctx, options) {
    const { id } = options;
    ctx.dispatch((state) => ({
        ...state,
        feeds: withKey(state.feeds, id, {
            data: undefined,
            error: undefined,
            loaded: false,
            loading: true,
        }),
    }));
    return options.initialize().then((baseData) => {
        loadedFeed(ctx, id, baseData, undefined);
        options.dispose = options.connect((item) => {
            updateFeed(ctx, id, item, options.update);
        });
    }, (err) => loadedFeed(ctx, id, undefined, err));
}
export function loadedFeed(ctx, id, data, error) {
    ctx.dispatch((state) => ({
        ...state,
        feeds: withKey(state.feeds, id, {
            loading: false,
            loaded: true,
            error,
            data,
        }),
    }));
}
export function updateFeed(ctx, id, item, reducer) {
    const feed = ctx.readState((state) => state.feeds[id]);
    const result = reducer(feed.data, item);
    if (result instanceof Promise) {
        return result
            .then((data) => loadedFeed(ctx, id, data, undefined))
            .catch((error) => loadedFeed(ctx, id, undefined, error));
    }
    else if (result !== feed.data) {
        loadedFeed(ctx, id, result, undefined);
    }
}
//# sourceMappingURL=actions.js.map