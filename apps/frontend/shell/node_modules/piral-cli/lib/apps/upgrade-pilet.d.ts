import { LogLevels, NpmClientType } from '../types';
import { ForceOverwrite } from '../common';
export interface UpgradePiletOptions {
    /**
     * The version of the app shell to upgrade to.
     */
    version?: string;
    /**
     * The target pilet for upgrading. This is the root directory
     * of the pilet, i.e., where the package.json is stored.
     */
    target?: string;
    /**
     * Defines if files can be overwritten by scaffolding
     * template files, if available.
     */
    forceOverwrite?: ForceOverwrite;
    /**
     * Sets the log level to use (1-5).
     */
    logLevel?: LogLevels;
    /**
     * Defines if the dependencies should be installed, too.
     * If the option is disabled, only the package.json is
     * modified, but nothing is installed yet.
     */
    install?: boolean;
    /**
     * Defines a custom certificate for the website emulator.
     */
    cert?: string;
    /**
     * Allow self-signed certificates.
     */
    allowSelfSigned?: boolean;
    /**
     * Defines the used npm client. By default, "npm" is used
     * if no other client is autodetected. The autodetection
     * works against Lerna, pnpm, and Yarn.
     */
    npmClient?: NpmClientType;
    /**
     * Places additional variables that should used when scaffolding.
     */
    variables?: Record<string, string>;
}
export declare const upgradePiletDefaults: UpgradePiletOptions;
export declare function upgradePilet(baseDir?: string, options?: UpgradePiletOptions): Promise<void>;
