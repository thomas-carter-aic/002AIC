"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.installDependencies = installDependencies;
exports.uninstallPackage = uninstallPackage;
exports.installPackage = installPackage;
exports.detectClient = detectClient;
exports.initProject = initProject;
exports.isProject = isProject;
exports.listProjects = listProjects;
const path_1 = require("path");
const log_1 = require("../common/log");
const io_1 = require("../common/io");
const scripts_1 = require("../common/scripts");
const MemoryStream_1 = require("../common/MemoryStream");
// Helpers:
function runPnpmProcess(args, target, output) {
    (0, log_1.log)('generalDebug_0003', 'Starting the Pnpm process ...');
    const cwd = (0, path_1.resolve)(process.cwd(), target);
    return (0, scripts_1.runCommand)('pnpm', args, cwd, output);
}
function convert(flags) {
    return flags.map((flag) => {
        switch (flag) {
            case '--no-save':
                // unfortunately no (https://github.com/pnpm/pnpm/issues/1237)
                return '';
            default:
                return flag;
        }
    });
}
// Client interface functions:
async function installDependencies(target = '.', ...flags) {
    const ms = new MemoryStream_1.MemoryStream();
    await runPnpmProcess(['install', ...convert(flags)], target, ms);
    (0, log_1.log)('generalDebug_0003', `Pnpm install dependencies result: ${ms.value}`);
    return ms.value;
}
async function uninstallPackage(packageRef, target = '.', ...flags) {
    const ms = new MemoryStream_1.MemoryStream();
    await runPnpmProcess(['remove', packageRef, ...convert(flags)], target, ms);
    (0, log_1.log)('generalDebug_0003', `Pnpm remove package result: ${ms.value}`);
    return ms.value;
}
async function installPackage(packageRef, target = '.', ...flags) {
    const ms = new MemoryStream_1.MemoryStream();
    await runPnpmProcess(['add', packageRef, ...convert(flags)], target, ms);
    (0, log_1.log)('generalDebug_0003', `Pnpm add package result: ${ms.value}`);
    return ms.value;
}
async function detectClient(root, stopDir = (0, path_1.resolve)(root, '/')) {
    return !!(await (0, io_1.findFile)(root, ['pnpm-lock.yaml', 'pnpm-workspace.yaml'], stopDir));
}
async function initProject(projectName, target) { }
async function isProject(root, packageRef) {
    const projects = await listProjects(root);
    if (Array.isArray(projects)) {
        return projects?.some((p) => p.name === packageRef) ?? false;
    }
    return false;
}
// Functions to exclusively use from pnpm client:
async function listProjects(target) {
    const ms = new MemoryStream_1.MemoryStream();
    try {
        await runPnpmProcess(['list', '--json', '--recursive', '--depth', '0'], target, ms);
    }
    catch (e) {
        (0, log_1.log)('generalDebug_0003', `pnpm list error: ${e}`);
        return [];
    }
    (0, log_1.log)('generalDebug_0003', `pnpm list project result: ${ms.value}`);
    return JSON.parse(ms.value);
}
//# sourceMappingURL=pnpm.js.map