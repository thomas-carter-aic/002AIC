"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.installDependencies = installDependencies;
exports.uninstallPackage = uninstallPackage;
exports.installPackage = installPackage;
exports.detectClient = detectClient;
exports.initProject = initProject;
exports.isProject = isProject;
exports.listProjects = listProjects;
const path_1 = require("path");
const log_1 = require("../common/log");
const io_1 = require("../common/io");
const scripts_1 = require("../common/scripts");
const MemoryStream_1 = require("../common/MemoryStream");
// Helpers:
function runLernaProcess(args, target, output) {
    (0, log_1.log)('generalDebug_0003', 'Starting the Lerna process ...');
    const cwd = (0, path_1.resolve)(process.cwd(), target);
    return (0, scripts_1.runCommand)('lerna', args, cwd, output);
}
function convert(flags) {
    return flags.map((flag) => {
        switch (flag) {
            case '--save-exact':
                return '--exact';
            case '--save-dev':
                return '--dev';
            case '--no-save':
                // unfortunately no
                return '';
            default:
                return flag;
        }
    });
}
// Client interface functions:
async function installDependencies(target = '.', ...flags) {
    const ms = new MemoryStream_1.MemoryStream();
    await runLernaProcess(['bootstrap', ...flags], target, ms);
    (0, log_1.log)('generalDebug_0003', `Lerna bootstrap result: ${ms.value}`);
    return ms.value;
}
async function uninstallPackage(packageRef, target = '.', ...flags) {
    const ms = new MemoryStream_1.MemoryStream();
    // at the moment not supported by Lerna directly
    // workaround is to manipulate the package.json directly and bootstrap again...
    const packageData = await (0, io_1.readJson)(target, 'package.json');
    if (packageData.dependencies && packageRef in packageData.dependencies) {
        packageData.dependencies[packageRef] = undefined;
    }
    if (packageData.devDependencies && packageRef in packageData.devDependencies) {
        packageData.devDependencies[packageRef] = undefined;
    }
    if (packageData.peerDependencies && packageRef in packageData.peerDependencies) {
        packageData.peerDependencies[packageRef] = undefined;
    }
    await (0, io_1.writeJson)(target, 'package.json', packageData, true);
    await runLernaProcess(['bootstrap'], target, ms);
    (0, log_1.log)('generalDebug_0003', `Lerna bootstrap (after remove) package result: ${ms.value}`);
    return ms.value;
}
async function installPackage(packageRef, target = '.', ...flags) {
    const ms = new MemoryStream_1.MemoryStream();
    await runLernaProcess(['add', packageRef, ...convert(flags)], target, ms);
    (0, log_1.log)('generalDebug_0003', `Lerna add package result: ${ms.value}`);
    return ms.value;
}
async function detectClient(root, stopDir = (0, path_1.resolve)(root, '/')) {
    return !!(await (0, io_1.findFile)(root, 'lerna.json', stopDir));
}
async function initProject(projectName, target) { }
async function isProject(root, packageRef) {
    const projects = await listProjects(root);
    if (Array.isArray(projects)) {
        return projects?.some((p) => p.name === packageRef) ?? false;
    }
    return false;
}
// Functions to exclusively use from lerna client:
async function listProjects(target) {
    const ms = new MemoryStream_1.MemoryStream();
    try {
        await runLernaProcess(['list', '--json', '-p'], target, ms);
    }
    catch (e) {
        (0, log_1.log)('generalDebug_0003', `lerna list error: ${e}`);
        return [];
    }
    (0, log_1.log)('generalDebug_0003', `lerna list project result: ${ms.value}`);
    return JSON.parse(ms.value);
}
//# sourceMappingURL=lerna.js.map