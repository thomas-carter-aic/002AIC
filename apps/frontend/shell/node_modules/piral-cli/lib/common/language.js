"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDependencyPackages = getDependencyPackages;
exports.getDevDependencyPackages = getDevDependencyPackages;
exports.getFrameworkDependencies = getFrameworkDependencies;
exports.getDependencies = getDependencies;
exports.getDevDependencies = getDevDependencies;
const log_1 = require("./log");
const react17Deps = {
    react: '^17',
    'react-dom': '^17',
};
const react18Deps = {
    react: '^18',
    'react-dom': '^18',
};
const reactRouter5Deps = {
    'react-router': '^5',
    'react-router-dom': '^5',
};
const reactRouter6Deps = {
    'react-router': '^6',
    'react-router-dom': '^6',
};
const react17Typings = {
    '@types/react': '^17',
    '@types/react-dom': '^17',
};
const react18Typings = {
    '@types/react': '^18',
    '@types/react-dom': '^18',
};
const reactRouter5Typings = {
    '@types/react-router': '^5',
    '@types/react-router-dom': '^5',
};
const defaultDeps = {};
const defaultTypings = {
    '@types/react': '*',
    '@types/react-dom': '*',
};
function getDependencyPackages(framework, reactVersion, reactRouterVersion) {
    // take default packages only if piral-core
    return framework === 'piral-base'
        ? {}
        : {
            ...(reactVersion < 18 ? react17Deps : react18Deps),
            ...(reactRouterVersion < 6 ? reactRouter5Deps : reactRouter6Deps),
        };
}
function getDevDependencyPackages(framework, reactVersion, reactRouterVersion) {
    // take default dev packages only if not piral-base
    return framework === 'piral-base'
        ? {}
        : {
            ...(reactVersion < 18 ? react17Typings : react18Typings),
            ...(reactRouterVersion < 6 ? reactRouter5Typings : {}),
        };
}
function getFrameworkDependencies(framework, version) {
    return {
        ...(framework !== 'piral-base' ? { 'piral-base': `${version}` } : {}),
        ...(framework !== 'piral-base' && framework !== 'piral-core' ? { 'piral-core': `${version}` } : {}),
        [framework]: `${version}`,
    };
}
function getDependencies(language, packages = defaultDeps) {
    switch (language) {
        case 'js':
        case 'ts':
            return {
                ...packages,
            };
        default:
            (0, log_1.log)('generalDebug_0003', 'Did not find a valid language. Skipping "dependencies".');
            return {};
    }
}
function getDevDependencies(language, typings = defaultTypings) {
    switch (language) {
        case 'ts':
            return {
                ...typings,
                '@types/node': 'latest',
                typescript: 'latest',
            };
        case 'js':
            return {};
        default:
            (0, log_1.log)('generalDebug_0003', 'Did not find a valid language. Skipping "devDependencies".');
            return {};
    }
}
//# sourceMappingURL=language.js.map