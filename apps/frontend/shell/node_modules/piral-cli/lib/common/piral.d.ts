import { LogLevels, SharedDependency } from '../types';
export interface BaseBuildPiralOptions {
    root: string;
    targetDir: string;
    logLevel: LogLevels;
    bundlerName: string;
    externals: Array<SharedDependency>;
    ignored: Array<string>;
    outFile: string;
    entryFiles: string;
    optimizeModules: boolean;
    sourceMaps: boolean;
    watch: boolean;
    contentHash: boolean;
    piralInstances: Array<string>;
    scripts?: Record<string, string>;
    hooks?: {
        beforeBuild?(e: any): Promise<void>;
        afterBuild?(e: any): Promise<void>;
        beforeEmulator?(e: any): Promise<void>;
        afterEmulator?(e: any): Promise<void>;
        beforePackage?(e: any): Promise<void>;
        afterPackage?(e: any): Promise<void>;
    };
    _: Record<string, any>;
}
export interface BuildEmulatorOptions extends BaseBuildPiralOptions {
    emulatorType: string;
}
export declare function triggerBuildEmulator({ root, logLevel, externals, emulatorType, bundlerName, optimizeModules, sourceMaps, watch, ignored, contentHash, targetDir, outFile, scripts, entryFiles, piralInstances, hooks, _, }: BuildEmulatorOptions): Promise<void>;
export interface BuildShellOptions extends BaseBuildPiralOptions {
    minify: boolean;
    publicUrl: string;
}
export declare function triggerBuildShell({ root, targetDir, bundlerName, minify, optimizeModules, entryFiles, piralInstances, sourceMaps, logLevel, ignored, watch, outFile, publicUrl, contentHash, externals, hooks, scripts, _, }: BuildShellOptions): Promise<void>;
