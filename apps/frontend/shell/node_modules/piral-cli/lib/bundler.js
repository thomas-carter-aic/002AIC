"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.setBundler = setBundler;
exports.callPiralDebug = callPiralDebug;
exports.callPiletDebug = callPiletDebug;
exports.callPiralBuild = callPiralBuild;
exports.callPiletBuild = callPiletBuild;
exports.callDebugPiralFromMonoRepo = callDebugPiralFromMonoRepo;
const bundler_calls_1 = require("./build/bundler-calls");
const helpers_1 = require("./helpers");
const external_1 = require("./external");
const common_1 = require("./common");
const bundlers = [];
async function getBundlerToInstall() {
    const selectedBundler = common_1.config.bundler || 'webpack5';
    if ((0, external_1.isInteractive)()) {
        return await (0, common_1.promptSelect)('No bundler found. Which one do you want to install?', common_1.bundlerNames, selectedBundler);
    }
    (0, common_1.log)('bundlerNotInstalled_0176');
    return selectedBundler;
}
async function installDefaultBundler(root) {
    const selectedBundler = await getBundlerToInstall();
    (0, common_1.log)('generalDebug_0003', `Installation of bundler "${selectedBundler}".`);
    const selectedPackage = `piral-cli-${selectedBundler}`;
    (0, common_1.log)('generalDebug_0003', `Determining npm client at "${root}" ...`);
    const client = await (0, common_1.determineNpmClient)(root);
    const packageId = `${selectedPackage}@^${common_1.compatVersion}`;
    (0, common_1.log)('generalDebug_0003', `Prepare to install ${packageId} using "${client}" into "${root}".`);
    (0, common_1.progress)(`Installing ${selectedPackage} ...`);
    await (0, common_1.installNpmPackage)(client, packageId, root, '--save-dev', '--save-exact');
    (0, common_1.log)('generalDebug_0003', `Installed bundler from "${selectedPackage}".`);
    const { inject } = await Promise.resolve().then(() => __importStar(require('./inject')));
    inject(selectedPackage);
}
function checkDefaultBundler(bundler) {
    if (!bundler?.actions) {
        (0, common_1.fail)('defaultBundlerMissing_0173');
    }
    return bundler;
}
function checkCustomBundler(bundler, bundlerName) {
    if (!bundler?.actions) {
        (0, common_1.fail)('bundlerMissing_0172', bundlerName, helpers_1.availableBundlers);
    }
    return bundler;
}
async function findBundler(root, bundlerName) {
    const [defaultBundler] = bundlers;
    if (bundlerName) {
        const [bundler] = bundlers.filter((m) => m.name === bundlerName);
        return checkCustomBundler(bundler, bundlerName);
    }
    else if (!defaultBundler) {
        await installDefaultBundler(root);
        const [bundler] = bundlers;
        return checkDefaultBundler(bundler);
    }
    else if (bundlers.length > 1) {
        (0, common_1.log)('bundlerUnspecified_0175', helpers_1.availableBundlers);
    }
    return defaultBundler;
}
async function prepareArgs(bundler, args) {
    if (args.optimizeModules) {
        (0, common_1.progress)('Preparing modules ...');
        await (0, common_1.patchModules)(args.root, args.ignored);
        (0, common_1.logReset)();
    }
    if (bundler.prepare) {
        return await bundler.prepare(args);
    }
    return args;
}
function setBundler(bundler) {
    bundlers.push(bundler);
    if (!helpers_1.availableBundlers.includes(bundler.name)) {
        helpers_1.availableBundlers.push(bundler.name);
    }
}
async function callPiralDebug(args, bundlerName) {
    const bundler = await findBundler(args.root, bundlerName);
    try {
        const action = bundler.actions.debugPiral;
        const params = await prepareArgs(action, args);
        return await (0, bundler_calls_1.callDynamic)('debug-piral', action.path, params, action.exec);
    }
    catch (err) {
        (0, common_1.fail)('bundlingFailed_0174', err);
    }
}
async function callPiletDebug(args, bundlerName) {
    const bundler = await findBundler(args.root, bundlerName);
    try {
        const action = bundler.actions.debugPilet;
        const params = await prepareArgs(action, args);
        return await (0, bundler_calls_1.callDynamic)('debug-pilet', action.path, params, action.exec);
    }
    catch (err) {
        (0, common_1.fail)('bundlingFailed_0174', err);
    }
}
async function callPiralBuild(args, bundlerName) {
    const bundler = await findBundler(args.root, bundlerName);
    try {
        const action = bundler.actions.buildPiral;
        const params = await prepareArgs(action, args);
        const instance = await (0, bundler_calls_1.callStatic)('build-piral', action.path, params, action.exec);
        return instance.bundle;
    }
    catch (err) {
        (0, common_1.fail)('bundlingFailed_0174', err);
    }
}
async function callPiletBuild(args, bundlerName) {
    const bundler = await findBundler(args.root, bundlerName);
    try {
        const action = bundler.actions.buildPilet;
        const params = await prepareArgs(action, args);
        const instance = await (0, bundler_calls_1.callStatic)('build-pilet', action.path, params, action.exec);
        return instance.bundle;
    }
    catch (err) {
        (0, common_1.fail)('bundlingFailed_0174', err);
    }
}
async function callDebugPiralFromMonoRepo(args, bundlerName) {
    const bundler = await findBundler(args.root, bundlerName);
    try {
        const action = bundler.actions.watchPiral;
        const params = await prepareArgs(action, args);
        const instance = await (0, bundler_calls_1.callStatic)('debug-mono-piral', action.path, params, action.exec);
        return instance.bundle;
    }
    catch (err) {
        (0, common_1.fail)('bundlingFailed_0174', err);
    }
}
//# sourceMappingURL=bundler.js.map