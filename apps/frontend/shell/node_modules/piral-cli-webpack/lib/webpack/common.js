"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extensions = void 0;
exports.getVariables = getVariables;
exports.getHmrEntry = getHmrEntry;
exports.getPlugins = getPlugins;
exports.getRules = getRules;
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const utils_1 = require("piral-cli/utils");
const webpack_1 = require("webpack");
const HotModuleServerPlugin_1 = require("../plugins/HotModuleServerPlugin");
const SheetPlugin_1 = require("../plugins/SheetPlugin");
const piletCss = 'main.css';
function getStyleLoaders(production) {
    if (production) {
        return [MiniCssExtractPlugin.loader];
    }
    else {
        return [require.resolve('style-loader')];
    }
}
exports.extensions = ['.ts', '.tsx', '.js', '.jsx', '.json'];
function getVariables() {
    return Object.keys(process.env).reduce((prev, curr) => {
        prev[curr] = process.env[curr];
        return prev;
    }, {
        DEBUG_PIRAL: '',
        DEBUG_PILET: '',
    });
}
function getHmrEntry(hmrPort) {
    return hmrPort ? [`webpack-hot-middleware/client?path=http://localhost:${hmrPort}/__webpack_hmr&reload=true`] : [];
}
function getPlugins(plugins, production, pilet, hmrPort) {
    const otherPlugins = [
        new MiniCssExtractPlugin({
            filename: pilet ? piletCss : '[name].[hash:6].css',
            chunkFilename: '[id].[hash:6].css',
        }),
    ];
    if (process.env.WEBPACK_PROGRESS) {
        otherPlugins.push(new webpack_1.ProgressPlugin((percent, msg) => {
            if (percent !== undefined) {
                (0, utils_1.progress)(`${~~(percent * 100)}% : ${msg}`);
                if (percent === 1) {
                    (0, utils_1.logReset)();
                    (0, utils_1.log)('generalInfo_0000', 'Bundling finished.');
                }
            }
        }));
    }
    if (hmrPort) {
        otherPlugins.push(new webpack_1.HotModuleReplacementPlugin());
        otherPlugins.push(new HotModuleServerPlugin_1.HotModuleServerPlugin(hmrPort));
    }
    if (production) {
        otherPlugins.push(new webpack_1.optimize.OccurrenceOrderPlugin(true));
        if (pilet) {
            const name = process.env.BUILD_PCKG_NAME;
            otherPlugins.push(new SheetPlugin_1.default(piletCss, name, pilet));
        }
    }
    return plugins.concat(otherPlugins);
}
function getRules(production) {
    const styleLoaders = getStyleLoaders(production);
    const nodeModules = /node_modules/;
    const babelLoader = {
        loader: require.resolve('babel-loader'),
        options: {
            presets: ['@babel/preset-env', '@babel/preset-react'],
        },
    };
    const tsLoader = {
        loader: require.resolve('ts-loader'),
        options: {
            transpileOnly: true,
        },
    };
    const fileLoader = {
        loader: require.resolve('file-loader'),
        options: {
            esModule: false,
        },
    };
    return [
        {
            oneOf: [
                {
                    test: /\.s[ac]ss$/i,
                    use: [...styleLoaders, require.resolve('css-loader'), require.resolve('sass-loader')],
                },
                {
                    test: /\.css$/i,
                    use: [...styleLoaders, require.resolve('css-loader')],
                },
                {
                    test: /\.m?jsx?$/i,
                    use: [babelLoader],
                },
                {
                    test: /\.tsx?$/i,
                    use: [babelLoader, tsLoader],
                },
                {
                    test: /\.codegen$/i,
                    use: [require.resolve('parcel-codegen-loader')],
                },
                {
                    test: /\.js$/i,
                    use: [require.resolve('source-map-loader')],
                    exclude: nodeModules,
                    enforce: 'pre',
                },
                {
                    // Exclude `js` files to keep "css" loader working as it injects
                    // its runtime that would otherwise be processed through "file" loader.
                    // Also exclude `html` and `json` extensions so they get processed
                    // by webpacks internal loaders.
                    exclude: [/^$/, /\.(js|mjs|jsx|ts|tsx)$/i, /\.html$/i, /\.json$/i],
                    use: [fileLoader],
                },
                // Don't add new loaders here -> should be added before the last (catch-all) handler
            ],
        },
        {
            parser: {
                system: false,
            },
        },
    ];
}
//# sourceMappingURL=common.js.map