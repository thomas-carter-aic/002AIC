"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringify = void 0;
function serializeOperation(op) {
    if (op) {
        var mapping = {
            equal: '=',
            includes: '~=',
            'dash-match': '|=',
            prefix: '^=',
            substring: '*=',
            suffix: '$=',
        };
        var o = mapping[op.operator];
        return "".concat(o).concat(op.value);
    }
    return '';
}
function serializeNamespace(ns) {
    if (ns) {
        if (ns.type === 'specific') {
            return "".concat(ns.prefix, "\\:");
        }
        else if (ns.type === 'any') {
            return '*\\:';
        }
    }
    return '';
}
function stringify(selectors) {
    return selectors
        .map(function (sel) {
        switch (sel.type) {
            case 'combinator':
                // e.g., ">"
                switch (sel.value) {
                    case 'descendant':
                        return ' ';
                    case 'child':
                        return '>';
                    case 'next-sibling':
                        return '+';
                    case 'later-sibling':
                        return '~';
                }
                return '';
            case 'universal':
                // e.g., "*"
                return '*';
            case 'type':
                // e.g., "p"
                return sel.name;
            case 'class':
                // e.g., ".foo"
                return ".".concat(sel.name);
            case 'id':
                // e.g., "#foo"
                return "#".concat(sel.name);
            case 'attribute':
                // e.g., "hidden"
                return "[".concat(serializeNamespace(sel.namespace)).concat(sel.name).concat(serializeOperation(sel.operation), "]");
            case 'pseudo-class':
                // e.g., ":where"
                if (Array.isArray(sel.selectors)) {
                    var inner = stringify(sel.selectors);
                    return ":".concat(sel.kind, "(").concat(inner, ")");
                }
                return ":".concat(sel.kind);
            case 'pseudo-element':
                return "::".concat(sel.kind);
            default: {
                if (Array.isArray(sel)) {
                    return stringify(sel);
                }
                return '';
            }
        }
    })
        .join('');
}
exports.stringify = stringify;
//# sourceMappingURL=stringify.js.map