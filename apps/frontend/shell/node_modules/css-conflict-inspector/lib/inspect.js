"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.inspect = void 0;
function getPenalty(options, name, defaultValue) {
    if (name in options) {
        var value = options[name];
        if (typeof value === 'number') {
            return value;
        }
    }
    return defaultValue;
}
function getDefaultTypePenalty(type) {
    switch (type) {
        case 'body':
            return 80;
        case 'img':
        case 'input':
        case 'a':
        case 'button':
            return 70;
        case 'textarea':
            return 60;
        case 'h1':
        case 'h2':
        case 'h3':
        case 'h4':
        case 'h5':
        case 'h6':
        case 'figure':
        case 'article':
        case 'section':
            return 30;
        case 'span':
        case 'div':
        case 'td':
        case 'th':
        case 'tr':
            return 50;
        case 'p':
        case 'ol':
        case 'ul':
        case 'li':
        case 'table':
        case 'thead':
        case 'tfoot':
            return 40;
        default:
            return 20;
    }
}
function inspect(selectors, violations, options, scale) {
    if (scale === void 0) { scale = 1; }
    var violation = undefined;
    selectors.forEach(function (sel) {
        switch (sel.type) {
            case 'combinator': {
                switch (sel.value) {
                    case 'descendant':
                        // e.g., " "
                        scale *= 0.4;
                        break;
                    case 'child':
                        // e.g., ">"
                        scale *= 0.2;
                        break;
                    case 'next-sibling':
                        // e.g., "+"
                        scale *= 0.08;
                        break;
                    case 'later-sibling':
                        // e.g., "~"
                        scale *= 0.16;
                        break;
                }
                break;
            }
            case 'universal': {
                // e.g., "*"
                var penalty = getPenalty(options, 'universalPenalty', 90) * scale;
                if (penalty) {
                    violation = {
                        message: 'Detected use of an universal selector ("*")',
                        penalty: penalty,
                    };
                }
                else {
                    violation = undefined;
                }
                break;
            }
            case 'type': {
                // e.g., "p"
                var defaultPenalty = getDefaultTypePenalty(sel.name);
                var elementPenalty = getPenalty(options, 'elementPenalty', defaultPenalty) * scale;
                var customElementPenalty = getPenalty(options, 'customElementPenalty', 10) * scale;
                var isCustomElement = sel.name.includes('-');
                if (isCustomElement && customElementPenalty) {
                    violation = {
                        message: "Detected use of a type selector (custom element \"".concat(sel.name, "\")"),
                        penalty: customElementPenalty,
                    };
                }
                else if (!isCustomElement && elementPenalty) {
                    violation = {
                        message: "Detected use of a type selector (element \"".concat(sel.name, "\")"),
                        penalty: elementPenalty,
                    };
                }
                else {
                    violation = undefined;
                }
                break;
            }
            case 'class': {
                // e.g., ".foo"
                var numHyphens = sel.name.replace(/[^\_\-]/g, '').length;
                var isHashed = /[A-Z]+/.test(sel.name) && /[a-z]+/.test(sel.name) && sel.name.length > 5;
                var simplePenalty = getPenalty(options, 'simpleClassPenalty', 5) * scale;
                var simplerPenalty = getPenalty(options, 'simplerClassPenalty', 3) * scale;
                var simplestPenalty = getPenalty(options, 'simplestClassPenalty', 2) * scale;
                if (isHashed) {
                    // e.g., ".bUQMLr"
                    scale = 0;
                    violation = undefined;
                }
                else if (numHyphens < 1 && sel.name.length < 8 && simplePenalty) {
                    violation = {
                        message: "Detected use of a simple class selector (\"".concat(sel.name, "\")"),
                        penalty: simplePenalty,
                    };
                }
                else if (numHyphens < 1 && sel.name.length < 20 && simplerPenalty) {
                    violation = {
                        message: "Detected use of an almost simple class selector (\"".concat(sel.name, "\")"),
                        penalty: simplerPenalty,
                    };
                }
                else if (numHyphens < 2 && sel.name.length < 10 && simplestPenalty) {
                    violation = {
                        message: "Detected use of an almost simple class selector (\"".concat(sel.name, "\")"),
                        penalty: simplestPenalty,
                    };
                }
                else {
                    scale = 0;
                    violation = undefined;
                }
                break;
            }
            case 'id': {
                // e.g., "#foo"
                var penalty = getPenalty(options, 'idPenalty', 0) * scale;
                if (penalty) {
                    violation = {
                        message: "Detected use of an ID selector (\"".concat(sel.name, "\")"),
                        penalty: penalty,
                    };
                }
                else {
                    violation = undefined;
                }
                break;
            }
            case 'attribute': {
                // e.g., "hidden"
                var penalty = getPenalty(options, 'attributePenalty', 10) * scale;
                if (penalty) {
                    violation = {
                        message: "Detected use of an attribute selector (\"".concat(sel.name, "\")"),
                        penalty: penalty,
                    };
                }
                else {
                    violation = undefined;
                }
                break;
            }
            case 'pseudo-class': {
                // e.g., ":where"
                if (sel.kind === 'not' || sel.kind === 'has') {
                    // Does not change the outcome as we just don't know what else can be selected (like anything)
                }
                else if (sel.kind === 'where' || sel.kind === 'is') {
                    violation = undefined;
                    inspect(sel.selectors, violations, options, scale * 0.5);
                }
                else {
                    // These don't matter for the outcome
                }
                break;
            }
            case 'pseudo-element': {
                break;
            }
            default: {
                if (Array.isArray(sel)) {
                    inspect(sel, violations, options);
                }
                else {
                    console.log('Got unknown type', sel.type, sel);
                }
                break;
            }
        }
    });
    if (violation) {
        violations.push(violation);
    }
}
exports.inspect = inspect;
//# sourceMappingURL=inspect.js.map