import * as actions from './actions';
import { withApi, buildName, withRootExtension, withAll } from 'piral-core';
import { DefaultHost, DefaultDialog } from './default';
import { Modals } from './Modals';
function getModalDialogs(dialogs) {
    const modals = {};
    for (const { name, component, defaults, layout = {} } of dialogs) {
        modals[`global-${name}`] = {
            pilet: undefined,
            name,
            component,
            defaults,
            layout,
        };
    }
    return modals;
}
function withModals(modals) {
    return (state) => ({
        ...state,
        components: {
            ModalsHost: DefaultHost,
            ModalsDialog: DefaultDialog,
            ...state.components,
        },
        registry: {
            ...state.registry,
            modals,
        },
        modals: [],
    });
}
/**
 * Creates new Pilet API extensions for support modal dialogs.
 */
export function createModalsApi(config = {}) {
    const { dialogs = [], selectId = (name) => `${name}-${~~(Math.random() * 10000)}` } = config;
    return (context) => {
        context.defineActions(actions);
        context.dispatch(withAll(withModals(getModalDialogs(dialogs)), withRootExtension('piral-modals', Modals)));
        return (api, target) => {
            const pilet = target.name;
            return {
                showModal(simpleName, options) {
                    const name = buildName(pilet, simpleName);
                    const dialog = {
                        id: selectId(name),
                        name,
                        alternative: simpleName,
                        options,
                        close() {
                            context.closeModal(dialog);
                        },
                    };
                    context.openModal(dialog);
                    return dialog.close;
                },
                registerModal(name, arg, defaults, layout = {}) {
                    const id = buildName(pilet, name);
                    context.registerModal(id, {
                        pilet,
                        name,
                        component: withApi(context, arg, api, 'modal'),
                        defaults,
                        layout,
                    });
                    return () => api.unregisterModal(name);
                },
                unregisterModal(name) {
                    const id = buildName(pilet, name);
                    context.unregisterModal(id);
                },
            };
        };
    };
}
//# sourceMappingURL=create.js.map