import * as React from 'react';
import { findDOMNode } from 'react-dom';
import { RegisteredErrorInfo, RegisteredLoadingIndicator } from './components';
import { defer } from '../utils';
/**
 * The component for catching errors and displaying error information.
 */
export class ErrorBoundary extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            error: undefined,
        };
    }
    componentDidCatch(error) {
        const { piral, errorType } = this.props;
        const pilet = piral.meta.name;
        console.error(`[${pilet}] Exception in component of type "${errorType}".`, error);
        this.setState({
            error,
        });
    }
    componentDidUpdate(_, prevState) {
        const { error } = this.state;
        if (error && !prevState.error) {
            const { piral, errorType } = this.props;
            const pilet = piral.meta.name;
            defer(() => {
                const container = findDOMNode(this);
                piral.emit('unhandled-error', {
                    container,
                    errorType,
                    error,
                    pilet,
                });
            });
        }
    }
    render() {
        const { children, piral, errorType, ...renderProps } = this.props;
        const { error } = this.state;
        const rest = renderProps;
        if (error) {
            const pilet = piral.meta.name;
            return React.createElement(RegisteredErrorInfo, { type: errorType, error: error, pilet: pilet, ...rest });
        }
        return React.createElement(React.Suspense, { fallback: React.createElement(RegisteredLoadingIndicator, null) }, children);
    }
}
//# sourceMappingURL=ErrorBoundary.js.map