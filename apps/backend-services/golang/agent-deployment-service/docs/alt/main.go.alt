package main

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"sync"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

// Domain types
type Agent struct {
	ID     string `json:"id"`
	Name   string `json:"name"`
	Status string `json:"status"` // e.g., "pending", "running", "failed"
}

type DeploymentRequest struct {
	Name string `json:"name"`
}

// Reconciler interface (hexagonal domain port)
type Deployer interface {
	Deploy(ctx context.Context, name string) (string, error)
	GetStatus(id string) (string, error)
}

// MockDeployer implements Deployer (adapter for simulation)
type MockDeployer struct {
	agents map[string]*Agent
	mu     sync.RWMutex
}

func NewMockDeployer() *MockDeployer {
	return &MockDeployer{
		agents: make(map[string]*Agent),
	}
}

func (d *MockDeployer) Deploy(ctx context.Context, name string) (string, error) {
	id := uuid.New().String()
	d.mu.Lock()
	d.agents[id] = &Agent{ID: id, Name: name, Status: "pending"}
	d.mu.Unlock()

	// Simulate async deployment (e.g., container start) with goroutine
	go func() {
		time.Sleep(5 * time.Second) // Mock container launch delay
		d.mu.Lock()
		defer d.mu.Unlock()
		if agent, exists := d.agents[id]; exists {
			agent.Status = "running" // Or "failed" on error
		}
	}()

	return id, nil
}

func (d *MockDeployer) GetStatus(id string) (string, error) {
	d.mu.RLock()
	defer d.mu.RUnlock()
	if agent, exists := d.agents[id]; exists {
		return agent.Status, nil
	}
	return "", errors.New("agent not found")
}

func main() {
	deployer := NewMockDeployer()

	r := gin.Default()

	// POST /agents - Deploy new agent
	r.POST("/agents", func(c *gin.Context) {
		var req DeploymentRequest
		if err := c.ShouldBindJSON(&req); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
			return
		}

		id, err := deployer.Deploy(c.Request.Context(), req.Name)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
			return
		}

		c.JSON(http.StatusAccepted, gin.H{"id": id, "status": "pending"})
	})

	// GET /agents/:id - Get status
	r.GET("/agents/:id", func(c *gin.Context) {
		id := c.Param("id")
		status, err := deployer.GetStatus(id)
		if err != nil {
			c.JSON(http.StatusNotFound, gin.H{"error": err.Error()})
			return
		}

		c.JSON(http.StatusOK, gin.H{"id": id, "status": status})
	})

	r.Run(":8080") // Listen on 0.0.0.0:8080
}

// Usage: curl -X POST http://localhost:8080/agents -H "Content-Type: application/json" -d '{"name":"my-agent"}'
// Then: curl http://localhost:8080/agents/<returned-id>
